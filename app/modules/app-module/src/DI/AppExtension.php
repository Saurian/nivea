<?php

namespace AppModule\DI;


use Flame\Modules\Configurators\IPresenterMappingConfig;
use Flame\Modules\Providers\IPresenterMappingProvider;
use Flame\Modules\Providers\IRouterProvider;
use Nette\Application\Routers\Route;
use Nette\Application\Routers\RouteList;
use Nette\DI\CompilerExtension;
use Nette\PhpGenerator\ClassType;


/**
 * @author Pavel PaulÃ­k
 */
class AppExtension extends CompilerExtension
    implements
    \Kdyby\Doctrine\DI\IEntityProvider,
    IPresenterMappingProvider
//    IRouterProvider
{

    const TAG_ROUTE = 'devrun.route';

    /** @var string */
    private $_lang;

    /** @var mixed[] */
    public $defaults = array(
        'lang'    => 'cs',
        'session' => array(),
        'website' => array(
            'routePrefix'      => '',
            'defaultPresenter' => 'App:Default',
            'authentication'   => array(
                'autologin'        => null,
                'autoregistration' => null,
            ),
            'theme'            => 'devrun/devrun',
        ),
        'paths'   => array(
            'publicDir' => '%wwwDir%/public',
            'dataDir'   => '%appDir%/data',
            'logDir'    => '%appDir%/../log',
        ),
    );


    /**
     * Processes configuration data. Intended to be overridden by descendant.
     *
     * @return void
     */
    public function loadConfiguration()
    {
        $this->compiler->parseServices(
            $this->getContainerBuilder(),
            $this->loadFromFile(dirname(dirname(__DIR__)) . '/Resources/config/config.neon')
        );

        $container = $this->getContainerBuilder();
        $config    = $this->getConfig($this->defaults);

//        $presenter = explode(':', $config['website']['defaultPresenter']);

    }

    public function _beforeCompile()
    {
        $container = $this->getContainerBuilder();

        parent::beforeCompile(); // TODO: Change the autogenerated stub
    }


    public function _afterCompile(ClassType $class)
    {
        parent::afterCompile($class);

        $container = $this->getContainerBuilder();

    }


    /**
     * Setup presenter mapping : ClassNameMask => PresenterNameMask
     *
     * @param IPresenterMappingConfig &$presenterMappingConfig
     *
     * @return void
     */
    public function setupPresenterMapping(IPresenterMappingConfig &$presenterMappingConfig)
    {
        $presenterMappingConfig->setMapping('App', 'AppModule\*Module\Presenters\*Presenter'); // example from cms module
    }

    /**
     * Returns associative array of Namespace => mapping definition
     *
     * @return array
     */
    function getEntityMappings()
    {

        return array(
            'AppModule\Entities' => dirname(__DIR__) . '*Entity.php',
        );
    }

    /**
     * Returns array of ServiceDefinition,
     * that will be appended to setup of router service
     *
     * @return \Nette\Application\IRouter
     */
    public function getRoutesDefinition()
    {

        $router   = new RouteList();
        $router[] = new Route('index.php', 'App:Registration:default', Route::ONE_WAY);

        $router[]      = $adminRouter = new RouteList('Cms');
        $adminRouter[] = new Route('admin/[<locale=cs cs|en>/]<presenter>/<action>[/<id>]', array(
            'presenter' => 'Dashboard',
            'action'    => 'default'
        ));

        $router[] = $frontRouter = new RouteList('App');
        $frontRouter[] = new Route('sitemap.xml', array('presenter' => 'Sitemap', 'action' => 'sitemap',));
        $frontRouter[] = new Route('clear', array('presenter' => 'Homepage', 'action' => 'clearCache',));

        // detect prefix
        $mask = sprintf("[<locale=%s %s>/]<slug .+>[/<presenter>/<action>[/<id>]]", 'cs', 'cs|en');

        $frontRouter[] = new Route("[<locale={$this->_lang} sk|hu|cs>/]<presenter>/<action>[/<id>]", array(
                'presenter' => array(
                    Route::VALUE        => 'Homepage',
                    Route::FILTER_TABLE => array(),
                ),
                'action'    => array(
                    Route::VALUE        => 'default',
                    Route::FILTER_TABLE => array(
                        'odeslana' => 'send',
                    ),
                ),
            )
        );

        return $router;

    }
}
